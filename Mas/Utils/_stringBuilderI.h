#pragma once

#include <Mas/Utils/StringBuilder.h>
#include <string>

///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///
///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///

namespace Mas
{
namespace Utils
{
    template <class T>
    StringBuilder& StringBuilder::operator << (T t)
    {
        if constexpr (std::is_same<T, std::string>::value ||
                      std::is_same<T, std::string_view>::value ||
                      std::is_same<T, const char*>::value)
        {
            this->append(t);
        }
        else
        {
            this->append(std::to_string(t));
        }
        return *this;
    }
}
}

///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///
///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///

#include <Mas/Utils/_stringBuilderI.h>

///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///
///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///***\\\***///